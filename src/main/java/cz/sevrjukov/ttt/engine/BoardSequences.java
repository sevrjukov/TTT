package cz.sevrjukov.ttt.engine;

import cz.sevrjukov.ttt.board.Board;

import java.util.ArrayList;
import java.util.List;

public class BoardSequences {

	// which squares are contained in which lines - a square is always contained in multiple lines (3 or 4)
	public static final int[][] LINES_USAGE;

	// all vertical, horizontal and diagonal lines on the board
	// lines shorter than 5 are omitted, as we don't need to evaluate them (they are useless)
	// they are sorted from min square number to max square number
	public static final int[][] LINES = {

			// horizontals
			{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18},
			{19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37},
			{38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56},
			{57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75},
			{76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94},
			{95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113},
			{114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132},
			{133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151},
			{152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170},
			{171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189},
			{190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208},
			{209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227},
			{228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246},
			{247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265},
			{266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284},
			{285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303},
			{304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322},
			{323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341},
			{342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360},

			// verticals
			{0, 19, 38, 57, 76, 95, 114, 133, 152, 171, 190, 209, 228, 247, 266, 285, 304, 323, 342},
			{1, 20, 39, 58, 77, 96, 115, 134, 153, 172, 191, 210, 229, 248, 267, 286, 305, 324, 343},
			{2, 21, 40, 59, 78, 97, 116, 135, 154, 173, 192, 211, 230, 249, 268, 287, 306, 325, 344},
			{3, 22, 41, 60, 79, 98, 117, 136, 155, 174, 193, 212, 231, 250, 269, 288, 307, 326, 345},
			{4, 23, 42, 61, 80, 99, 118, 137, 156, 175, 194, 213, 232, 251, 270, 289, 308, 327, 346},
			{5, 24, 43, 62, 81, 100, 119, 138, 157, 176, 195, 214, 233, 252, 271, 290, 309, 328, 347},
			{6, 25, 44, 63, 82, 101, 120, 139, 158, 177, 196, 215, 234, 253, 272, 291, 310, 329, 348},
			{7, 26, 45, 64, 83, 102, 121, 140, 159, 178, 197, 216, 235, 254, 273, 292, 311, 330, 349},
			{8, 27, 46, 65, 84, 103, 122, 141, 160, 179, 198, 217, 236, 255, 274, 293, 312, 331, 350},
			{9, 28, 47, 66, 85, 104, 123, 142, 161, 180, 199, 218, 237, 256, 275, 294, 313, 332, 351},
			{10, 29, 48, 67, 86, 105, 124, 143, 162, 181, 200, 219, 238, 257, 276, 295, 314, 333, 352},
			{11, 30, 49, 68, 87, 106, 125, 144, 163, 182, 201, 220, 239, 258, 277, 296, 315, 334, 353},
			{12, 31, 50, 69, 88, 107, 126, 145, 164, 183, 202, 221, 240, 259, 278, 297, 316, 335, 354},
			{13, 32, 51, 70, 89, 108, 127, 146, 165, 184, 203, 222, 241, 260, 279, 298, 317, 336, 355},
			{14, 33, 52, 71, 90, 109, 128, 147, 166, 185, 204, 223, 242, 261, 280, 299, 318, 337, 356},
			{15, 34, 53, 72, 91, 110, 129, 148, 167, 186, 205, 224, 243, 262, 281, 300, 319, 338, 357},
			{16, 35, 54, 73, 92, 111, 130, 149, 168, 187, 206, 225, 244, 263, 282, 301, 320, 339, 358},
			{17, 36, 55, 74, 93, 112, 131, 150, 169, 188, 207, 226, 245, 264, 283, 302, 321, 340, 359},
			{18, 37, 56, 75, 94, 113, 132, 151, 170, 189, 208, 227, 246, 265, 284, 303, 322, 341, 360},

			// diagonals top-right
			{4,22,40,58,76},
			{5,23,41,59,77,95},
			{6,24,42,60,78,96,114},
			{7,25,43,61,79,97,115,133},
			{8,26,44,62,80,98,116,134,152},
			{9,27,45,63,81,99,117,135,153,171},
			{10,28,46,64,82,100,118,136,154,172,190},
			{11,29,47,65,83,101,119,137,155,173,191,209},
			{12,30,48,66,84,102,120,138,156,174,192,210,228},
			{13,31,49,67,85,103,121,139,157,175,193,211,229,247},
			{14,32,50,68,86,104,122,140,158,176,194,212,230,248,266},
			{15,33,51,69,87,105,123,141,159,177,195,213,231,249,267,285},
			{16,34,52,70,88,106,124,142,160,178,196,214,232,250,268,286,304},
			{17,35,53,71,89,107,125,143,161,179,197,215,233,251,269,287,305,323},
			{18,36,54,72,90,108,126,144,162,180,198,216,234,252,270,288,306,324,342},
			{37,55,73,91,109,127,145,163,181,199,217,235,253,271,289,307,325,343},
			{56,74,92,110,128,146,164,182,200,218,236,254,272,290,308,326,344},
			{75,93,111,129,147,165,183,201,219,237,255,273,291,309,327,345},
			{94,112,130,148,166,184,202,220,238,256,274,292,310,328,346},
			{113,131,149,167,185,203,221,239,257,275,293,311,329,347},
			{132,150,168,186,204,222,240,258,276,294,312,330,348},
			{151,169,187,205,223,241,259,277,295,313,331,349},
			{170,188,206,224,242,260,278,296,314,332,350},
			{189,207,225,243,261,279,297,315,333,351},
			{208,226,244,262,280,298,316,334,352},
			{227,245,263,281,299,317,335,353},
			{246,264,282,300,318,336,354},
			{265,283,301,319,337,355},
			{284,302,320,338,356},

			// diagonals top-left
			{266, 286, 306, 326, 346},
			{247, 267, 287, 307, 327, 347},
			{228, 248, 268, 288, 308, 328, 348},
			{209, 229, 249, 269, 289, 309, 329, 349},
			{190, 210, 230, 250, 270, 290, 310, 330, 350},
			{171, 191, 211, 231, 251, 271, 291, 311, 331, 351},
			{152, 172, 192, 212, 232, 252, 272, 292, 312, 332, 352},
			{133, 153, 173, 193, 213, 233, 253, 273, 293, 313, 333, 353},
			{114, 134, 154, 174, 194, 214, 234, 254, 274, 294, 314, 334, 354},
			{95, 115, 135, 155, 175, 195, 215, 235, 255, 275, 295, 315, 335, 355},
			{76, 96, 116, 136, 156, 176, 196, 216, 236, 256, 276, 296, 316, 336, 356},
			{57, 77, 97, 117, 137, 157, 177, 197, 217, 237, 257, 277, 297, 317, 337, 357},
			{38, 58, 78, 98, 118, 138, 158, 178, 198, 218, 238, 258, 278, 298, 318, 338, 358},
			{19, 39, 59, 79, 99, 119, 139, 159, 179, 199, 219, 239, 259, 279, 299, 319, 339, 359},
			{0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360},
			{1, 21, 41, 61, 81, 101, 121, 141, 161, 181, 201, 221, 241, 261, 281, 301, 321, 341},
			{2, 22, 42, 62, 82, 102, 122, 142, 162, 182, 202, 222, 242, 262, 282, 302, 322},
			{3, 23, 43, 63, 83, 103, 123, 143, 163, 183, 203, 223, 243, 263, 283, 303},
			{4, 24, 44, 64, 84, 104, 124, 144, 164, 184, 204, 224, 244, 264, 284},
			{5, 25, 45, 65, 85, 105, 125, 145, 165, 185, 205, 225, 245, 265},
			{6, 26, 46, 66, 86, 106, 126, 146, 166, 186, 206, 226, 246},
			{7, 27, 47, 67, 87, 107, 127, 147, 167, 187, 207, 227},
			{8, 28, 48, 68, 88, 108, 128, 148, 168, 188, 208},
			{9, 29, 49, 69, 89, 109, 129, 149, 169, 189},
			{10, 30, 50, 70, 90, 110, 130, 150, 170},
			{11, 31, 51, 71, 91, 111, 131, 151},
			{12, 32, 52, 72, 92, 112, 132},
			{13, 33, 53, 73, 93, 113},
			{14, 34, 54, 74, 94}
	};

	static {
		LINES_USAGE = new int[Board.SIZE][];
		for (int squareNum = 0; squareNum < Board.SIZE; squareNum++) {
			List<Integer> lineUsageList = new ArrayList<>();
			int lineNumber = 0;
			for (int[] line : LINES) {
				if (arrayContains(squareNum, line)) {
					lineUsageList.add(lineNumber);
				}
				lineNumber++;
			}
			LINES_USAGE[squareNum] = listToArray(lineUsageList);
		}
	}

	private static int [] listToArray(List<Integer> list) {
		int [] result = new int[list.size()];
		int index = 0;
		for (int a : list) {
			result[index] = a;
			index++;
		}
		return result;
	}


	private static boolean arrayContains(int num, int[] arr) {
		for (int i : arr) {
			if (i == num) {
				return true;
			}
		}
		return false;
	}


//	public static void main(String[] args) {
//		int sqNum = 0;
//		for (int [] lineUsage : LINES_USAGE) {
//			System.out.print(sqNum +  "->");
//			printArray(lineUsage);
//			sqNum++;
//		}
//	}

//	public static void main(String[] args) {
//		for (int sqNum = 0; sqNum < Board.SIZE; sqNum++) {
//			System.out.println(sqNum + "->" + ASSOCIATIVE_INDEXES[sqNum].length);
//			for (int[] arr : ASSOCIATIVE_INDEXES[sqNum]) {
//				printArray(arr);
//			}
//		}
//	}
//
//	private static void printArray(int[] arr) {
//		System.out.print("{");
//		for (int i : arr) {
//			System.out.print(i + ",");
//		}
//		System.out.println("}");
//	}

}
